// <auto-generated />
using System;
using GTL.Persistence;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace GTL.Persistence.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("GTL.Domain.Models.AcquisitionEntity", b =>
                {
                    b.Property<Guid>("MemberId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("member_id");

                    b.Property<Guid>("ItemCatalogId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("item_catalog_id");

                    b.Property<DateTime>("RequestDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("request_date");

                    b.Property<int>("Amount")
                        .HasColumnType("int")
                        .HasColumnName("amount");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion")
                        .HasColumnName("row_version");

                    b.HasKey("MemberId", "ItemCatalogId", "RequestDate")
                        .HasName("pk_acquisition_entities");

                    b.HasIndex("ItemCatalogId")
                        .HasDatabaseName("ix_acquisition_entities_item_catalog_id");

                    b.ToTable("acquisition_entities", (string)null);
                });

            modelBuilder.Entity("GTL.Domain.Models.AuthorEntity", b =>
                {
                    b.Property<Guid?>("ItemCatalogId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("item_catalog_id");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("name");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion")
                        .HasColumnName("row_version");

                    b.HasKey("ItemCatalogId", "Name")
                        .HasName("pk_author_entities");

                    b.ToTable("author_entities", (string)null);
                });

            modelBuilder.Entity("GTL.Domain.Models.ItemBorrowingsEntity", b =>
                {
                    b.Property<Guid>("MemberId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("member_id");

                    b.Property<Guid>("ItemId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("item_id");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("start_date");

                    b.Property<DateTime>("Due")
                        .HasColumnType("datetime2")
                        .HasColumnName("due");

                    b.Property<DateTime?>("ReturnedDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("returned_date");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion")
                        .HasColumnName("row_version");

                    b.HasKey("MemberId", "ItemId", "StartDate")
                        .HasName("pk_item_borrowing_entities");

                    b.HasIndex("ItemId")
                        .HasDatabaseName("ix_item_borrowing_entities_item_id");

                    b.ToTable("item_borrowing_entities", (string)null);
                });

            modelBuilder.Entity("GTL.Domain.Models.ItemCatalogEntity", b =>
                {
                    b.Property<Guid>("ItemCatalogId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("item_catalog_id");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("description");

                    b.Property<string>("Edition")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("edition");

                    b.Property<string>("ISBN")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("isbn");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion")
                        .HasColumnName("row_version");

                    b.Property<string>("SubjectArea")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("subject_area");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("title");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("type");

                    b.HasKey("ItemCatalogId")
                        .HasName("pk_item_catalog_entities");

                    b.HasIndex("SubjectArea")
                        .HasDatabaseName("ix_item_catalog_entities_subject_area");

                    b.HasIndex("Title")
                        .HasDatabaseName("ix_item_catalog_entities_title");

                    b.ToTable("item_catalog_entities", (string)null);
                });

            modelBuilder.Entity("GTL.Domain.Models.ItemEntity", b =>
                {
                    b.Property<Guid>("ItemId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("item_id");

                    b.Property<string>("Condition")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("condition");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2")
                        .HasColumnName("date_created");

                    b.Property<bool>("IsLendable")
                        .HasColumnType("bit")
                        .HasColumnName("is_lendable");

                    b.Property<Guid>("ItemCatalogId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("item_catalog_id");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion")
                        .HasColumnName("row_version");

                    b.HasKey("ItemId")
                        .HasName("pk_item_entities");

                    b.HasIndex("ItemCatalogId")
                        .HasDatabaseName("ix_item_entities_item_catalog_id");

                    b.ToTable("item_entities", (string)null);
                });

            modelBuilder.Entity("GTL.Domain.Models.MemberEntity", b =>
                {
                    b.Property<Guid>("MemberId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("member_id");

                    b.Property<string>("CampusAddress")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("campus_address");

                    b.Property<DateTime>("CardExpirationDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("card_expiration_date");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("email");

                    b.Property<string>("EmployeePosition")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("employee_position");

                    b.Property<string>("HomeAddress")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("home_address");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("name");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("phone_number");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion")
                        .HasColumnName("row_version");

                    b.Property<string>("SSN")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("ssn");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("type");

                    b.HasKey("MemberId")
                        .HasName("pk_member_entities");

                    b.ToTable("member_entities", (string)null);
                });

            modelBuilder.Entity("GTL.Domain.Models.ReserveItemEntity", b =>
                {
                    b.Property<Guid>("ItemCatalogId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("item_catalog_id");

                    b.Property<Guid>("MemberId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("member_id");

                    b.Property<int>("Amount")
                        .HasColumnType("int")
                        .HasColumnName("amount");

                    b.Property<DateTime>("DateReserved")
                        .HasColumnType("datetime2")
                        .HasColumnName("date_reserved");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion")
                        .HasColumnName("row_version");

                    b.HasKey("ItemCatalogId", "MemberId")
                        .HasName("pk_reserve_item_entities");

                    b.HasIndex("MemberId")
                        .HasDatabaseName("ix_reserve_item_entities_member_id");

                    b.ToTable("reserve_item_entities", (string)null);
                });

            modelBuilder.Entity("GTL.Domain.Models.AcquisitionEntity", b =>
                {
                    b.HasOne("GTL.Domain.Models.ItemCatalogEntity", "Catalog")
                        .WithMany("AcquisitionItems")
                        .HasForeignKey("ItemCatalogId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_item_catalogid");

                    b.HasOne("GTL.Domain.Models.MemberEntity", "Members")
                        .WithMany("AcquisitionItems")
                        .HasForeignKey("MemberId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_member_id");

                    b.Navigation("Catalog");

                    b.Navigation("Members");
                });

            modelBuilder.Entity("GTL.Domain.Models.AuthorEntity", b =>
                {
                    b.HasOne("GTL.Domain.Models.ItemCatalogEntity", "Catalog")
                        .WithMany("Authors")
                        .HasForeignKey("ItemCatalogId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_itemcatalog_id");

                    b.Navigation("Catalog");
                });

            modelBuilder.Entity("GTL.Domain.Models.ItemBorrowingsEntity", b =>
                {
                    b.HasOne("GTL.Domain.Models.ItemEntity", "Items")
                        .WithMany("Borrowings")
                        .HasForeignKey("ItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_item_id");

                    b.HasOne("GTL.Domain.Models.MemberEntity", "Members")
                        .WithMany("Borrowings")
                        .HasForeignKey("MemberId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fkmember_id");

                    b.Navigation("Items");

                    b.Navigation("Members");
                });

            modelBuilder.Entity("GTL.Domain.Models.ItemEntity", b =>
                {
                    b.HasOne("GTL.Domain.Models.ItemCatalogEntity", "Catalog")
                        .WithMany("Items")
                        .HasForeignKey("ItemCatalogId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fkitem_catalog_id");

                    b.Navigation("Catalog");
                });

            modelBuilder.Entity("GTL.Domain.Models.ReserveItemEntity", b =>
                {
                    b.HasOne("GTL.Domain.Models.ItemCatalogEntity", "Catalog")
                        .WithMany("ReservedItems")
                        .HasForeignKey("ItemCatalogId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_itemcatalogid");

                    b.HasOne("GTL.Domain.Models.MemberEntity", "Members")
                        .WithMany("ReservedItems")
                        .HasForeignKey("MemberId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_memberid");

                    b.Navigation("Catalog");

                    b.Navigation("Members");
                });

            modelBuilder.Entity("GTL.Domain.Models.ItemCatalogEntity", b =>
                {
                    b.Navigation("AcquisitionItems");

                    b.Navigation("Authors");

                    b.Navigation("Items");

                    b.Navigation("ReservedItems");
                });

            modelBuilder.Entity("GTL.Domain.Models.ItemEntity", b =>
                {
                    b.Navigation("Borrowings");
                });

            modelBuilder.Entity("GTL.Domain.Models.MemberEntity", b =>
                {
                    b.Navigation("AcquisitionItems");

                    b.Navigation("Borrowings");

                    b.Navigation("ReservedItems");
                });
#pragma warning restore 612, 618
        }
    }
}
